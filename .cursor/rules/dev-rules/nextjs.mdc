---
description: 
globs: 
alwaysApply: false
---
---
description: Next.js 14 + Firebase + Clerk 向けベストプラクティス実装ルール
globs:
  - "src/app/**/*.{ts,tsx}"       # ページ & API（App Router）
  - "src/components/**/*.{ts,tsx}" # コンポーネント構成ルールも含める
  - "src/lib/**/*.{ts,tsx}"        # 共通ユーティリティ / バリデーション
  - "src/hooks/**/*.{ts,tsx}"      # カスタムフックにも適用

alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# Next.js × Firebase × Clerk ベストプラクティス

## 1. ルーティング & ファイル構造

src/
├─ app/ # App Router ルート
│ ├─ (public)/ # 認証不要ページ
│ ├─ (auth)/sign-in/ # Clerk 標準ページをラップ
│ ├─ (dashboard)/ # 認証必須エリア
│ │ ├─ layout.tsx # Protected Layout
│ │ └─ page.tsx
│ └─ api/ # App Router API （POST / PATCH / DELETE のみ）
├─ components/
│ ├─ common/ # 汎用 UI
│ ├─ features/flashcard/ # 機能ごと
│ └─ layouts/ # 画面レイアウト
├─ hooks/ # カスタム Hooks
├─ lib/
│ ├─ firebase/ # firebase.ts / admin.ts
│ ├─ validators/ # Zod schemas
│ └─ types/ # 共通型
└─ public/

### 命名規則
- ページ: `page.tsx`・レイアウト: `layout.tsx`
- ローディング: `loading.tsx`・エラーバウンダリ: `error.tsx`
- Client Component には `use client` を先頭に書く

---

## 2. コンポーネント設計

| 種別 | 使う場面 | 例 |
|------|----------|----|
| **Server Component (デフォルト)** | Firestore 取得 / SEO / 静的 UI | `app/(dashboard)/page.tsx` |
| **Client Component** | イベント処理・hooks・状態管理 | `components/features/flashcard/FlashcardArea.tsx` |

---

## 3. API 実装指針

- **GET を作らず**、取得は Server Component 内で `firebase-admin` を直接呼ぶ  
- `app/api/**/route.ts` では **POST / PATCH / DELETE** のみ実装
- 認証は `@clerk/nextjs/server` の `auth()` で `userId` を取得し検証  
- バリデーション: **クライアント側 → Zod / サーバー側 → 同じ Zod schema を再検証（二重チェック）**

#### 例：POST `/api/folders/[folderName]/words`
```ts
import { NextRequest, NextResponse } from "next/server";
import { auth } from "@clerk/nextjs/server";
import { adminDb } from "@/lib/firebase/admin";
import { addWordSchema } from "@/lib/validators/word";

export async function POST(req: NextRequest, ctx: { params: { folderName: string } }) {
  const { userId } = auth();
  if (!userId) return new NextResponse("Unauthorized", { status: 401 });

  const body = await req.json();
  const parse = addWordSchema.safeParse(body);
  if (!parse.success) return NextResponse.json(parse.error.flatten(), { status: 422 });

  const { korean, japanese } = parse.data;
  const doc = adminDb
    .collection("users").doc(userId)
    .collection("folders").doc(ctx.params.folderName)
    .collection("words").doc();

  await doc.set({ id: doc.id, korean, japanese, createdAt: Date.now() });
  return NextResponse.json({ id: doc.id }, { status: 201 });
}
```

---

## 4. パフォーマンス最適化

- `next/image` コンポーネントを使って画像最適化を行う  
- サーバー取得は `fetch()` の `next: { revalidate: 秒数 }` を使って ISR（Incremental Static Regeneration）を活用  
- Client Component では必要最小限に限定し、再レンダリング対策として `useMemo`, `useCallback` を適切に利用

---

## 5. エラーハンドリング

- 各ページ階層に `error.tsx` を配置して、クラッシュではなく UX を保つ
- API での失敗は `NextResponse.json(..., { status })` によって適切なエラー構造を返却
- フロントエンドではトーストやアラート等によるユーザー通知を行う

---

## 6. 型安全 & バリデーション

- `tsconfig.json` にて `strict: true` を有効にする
- フォームやAPIでの入力バリデーションは `Zod` によりスキーマを定義し、クライアント側・サーバー側の両方で同じスキーマを使用
- Firestore のドキュメント構造に関する型は `lib/types/` 内で集中管理すること

---

## 7. セキュリティ対策

- `.env.local` に Firebase / Clerk などの機密環境変数を定義し、コミットしないよう `.gitignore` を徹底
- 公開される環境変数は `NEXT_PUBLIC_` プレフィックスを使用
- `next.config.js` にて適切な CSP（Content Security Policy）および セキュリティヘッダーを設定する
- Firestore セキュリティルールは以下のように設定：
  ```txt
  match /users/{userId}/folders/{folderName}/words/{wordId} {
    allow read, write: if request.auth != null && request.auth.uid == userId;
  }

---


## 8. デプロイと CI/CD

- GitHub と Vercel を連携し、Pull Request ごとに Preview 環境が自動生成されるように設定する
- ローカル環境の `.env.local` に環境変数を同期するコマンド：
  ```bash
  vercel env pull .env.local

- ローカル開発環境とVercel環境の環境変数を一致させるため、以下のコマンドを使用:
 pnpm lint && pnpm build

## 9. メンテナンス運用

## 依存パッケージの更新

- 毎月1回、以下のコマンドで依存パッケージを更新する:

```bash
pnpm up -L
```


## メジャーアップデートの対応

- `firebase-admin` などのメジャーアップデート時は、**Preview環境** または **Staging環境** にて必ず事前検証を実施すること

## パフォーマンス測定の実施

以下のツールを使用し、定期的にアプリのパフォーマンスをモニタリングする：

- Vercel Analytics
- Google PageSpeed Insights
- Lighthouse（Chrome DevTools）

指標として **Core Web Vitals（LCP / FID / CLS）** を中心に確認し、UX を継続的に改善すること

## 10. 守るべき開発方針

## UI/UX に関する変更

- レイアウト、色、フォント、間隔などの**UI/UXに関わる変更は必ず事前に承認を得ること**
- 勝手なデザイン変更は一切禁止
- 必要な変更がある場合は、**目的・ビフォーアフター・影響範囲**を明示して提案

## 技術スタックの変更

以下のようなライブラリやフレームワークの変更時は、**承認フローを厳守**すること：

- Next.js
- Firebase / Firestore
- Tailwind CSS
- Clerk
- その他主要ライブラリ（React Query, Zod など）

### フロー

1. 影響範囲を整理・調査
2. **変更提案書を作成（目的・影響・代替案を含む）**
3. 承認を得てから、専用ブランチを作成して段階的に適用

## トラブル発生時の対応

障害・バグ・パフォーマンス劣化が発生した場合は、以下のプロセスを即時実行する：

1. **状況報告**（再現手順、影響範囲、ログ情報など）
2. **暫定対応の実施**（rollback、feature flag など）
3. **恒久対策の提示**（原因の分析と再発防止策）

> ✅ 報告は口頭・チャットだけでなく、issue/ドキュメントにも残すこと


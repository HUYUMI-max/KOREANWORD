---
description: 
globs: 
alwaysApply: false
---
---
description: Firestore におけるデータベース設計ルール
globs: *.ts, *.tsx
alwaysApply: false
---

まず、このファイルを参照したら、このファイル名を発言すること

# Firestore データベース設計ルール

## 概要

このプロジェクトでは Firebase Firestore を使用してデータを管理します。NoSQLベースの設計であるため、リレーショナルな正規化ではなく、**読み取り最適化（読みやすさとシンプルさ）**を重視します。

---

## 設計ルール

### 1. ドキュメント設計

- コレクションとドキュメントの階層をできるだけ浅く保つ
- 単語帳の構造例：
users/{userId}/folders/{folderName}/words/{wordId}

### 2. 命名規則

- コレクション名は複数形（例: `users`, `folders`, `words`）
- フィールド名はキャメルケース（例: `createdAt`, `koreanWord`）

### 3. フィールド設計

- `id`, `createdAt`, `updatedAt` を基本的に含める
- 日時には `Timestamp` 型を使用
- 文字列には `string`、数値には `number`、論理値には `boolean`

### 4. データの正規化 vs 非正規化

- **基本は非正規化**（ドキュメントに必要なデータをすべて持たせる）
- 必要に応じて重複を許容して高速化
- 多対多はコレクションの中にサブコレクションまたは ID リストを保持

### 5. インデックス戦略

- Firestore の自動インデックスを活用
- 複合条件が必要なクエリには **カスタムインデックス** を定義
- 不要な複合インデックスはコンソールで削除

---

## セキュリティルール

- Firestore Rules により、各ユーザーが自分のデータのみにアクセスできるようにする
- 例：
  ```js
  match /users/{userId}/folders/{folderId}/words/{wordId} {
    allow read, write: if request.auth != null && request.auth.uid == userId;
  }

 --- 

## バリデーション指針

- クライアント側では zod などのスキーマバリデーションライブラリを使用し、以下のようなチェックを行うこと：
  - 必須項目（空文字やnullの禁止）
  - 文字列の最大長・最小長（例:max 50 文字）
  - フォーマットチェック（例:メール形式、URL、電話番号など）
  - データ型の明示（string, number, boolean など）

- サーバー側（API や Cloud Functions など）でも **同様のバリデーションを二重で実施**すること（クライアントバリデーションだけではセキュリティ的に不十分なため）

- バリデーションスキーマの共通化が可能な場合は、`src/lib/validation/` 等に共通定義を置き、フロント／バックエンドの両方で参照する

- バリデーションに失敗した場合は、**ユーザーに分かりやすいエラーメッセージ**を返すこと

- 型安全と補完のために、Zod や Yup のような型推論対応ライブラリの使用を推奨

---

## マイグレーション（変更管理）

- Firestore はスキーマレスなのでマイグレーションツールは不要
- ただし以下の習慣を持つ：

  - スキーマ変更時は新フィールドを追加 → 移行 → 古いフィールド削除
  - 重要な変更は Notion や GitHub のドキュメントで履歴を管理

---

## デプロイ前チェック

- Firestore.rules が `firebase deploy` 前に正しく適用されているか確認
- 不要な読み取り・書き込みが開放されていないかを重点チェック

---

## 注意事項とベストプラクティス

1. コレクションのネストは深くしすぎない（最大5階層が目安）
2. ドキュメントサイズは最大 1MB。画像など大きなデータは Storage に分離
3. クエリパフォーマンス向上のため、必要なインデックスを明示的に作成
4. ユーザー認証・認可は常に `auth.uid` ベースで実装
5. 作成日時・更新日時は `serverTimestamp()` を使って自動化

---

このルールは、Firebase Firestore ベースのアプリケーションにおける基本方針をまとめたものです。

